# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Player(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Player()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPlayer(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Player
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Player
    def Uid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Player
    def Username(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Player
    def ImageUrl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Player
    def Score(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Player
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Player
    def Battery(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Player
    def Controller(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Player
    def Glass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def PlayerStart(builder):
    builder.StartObject(8)

def Start(builder):
    PlayerStart(builder)

def PlayerAddUid(builder, uid):
    builder.PrependInt32Slot(0, uid, 0)

def AddUid(builder, uid):
    PlayerAddUid(builder, uid)

def PlayerAddUsername(builder, username):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(username), 0)

def AddUsername(builder, username):
    PlayerAddUsername(builder, username)

def PlayerAddImageUrl(builder, imageUrl):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(imageUrl), 0)

def AddImageUrl(builder, imageUrl):
    PlayerAddImageUrl(builder, imageUrl)

def PlayerAddScore(builder, score):
    builder.PrependInt32Slot(3, score, 0)

def AddScore(builder, score):
    PlayerAddScore(builder, score)

def PlayerAddStatus(builder, status):
    builder.PrependInt8Slot(4, status, 0)

def AddStatus(builder, status):
    PlayerAddStatus(builder, status)

def PlayerAddBattery(builder, battery):
    builder.PrependFloat32Slot(5, battery, 0.0)

def AddBattery(builder, battery):
    PlayerAddBattery(builder, battery)

def PlayerAddController(builder, controller):
    builder.PrependBoolSlot(6, controller, 0)

def AddController(builder, controller):
    PlayerAddController(builder, controller)

def PlayerAddGlass(builder, glass):
    builder.PrependBoolSlot(7, glass, 0)

def AddGlass(builder, glass):
    PlayerAddGlass(builder, glass)

def PlayerEnd(builder):
    return builder.EndObject()

def End(builder):
    return PlayerEnd(builder)
