# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Frame(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Frame()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFrame(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Frame
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Frame
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Frame
    def Command(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Frame
    def Sender(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Frame
    def DataType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Frame
    def Data(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def FrameStart(builder):
    builder.StartObject(5)

def Start(builder):
    FrameStart(builder)

def FrameAddTimestamp(builder, timestamp):
    builder.PrependInt64Slot(0, timestamp, 0)

def AddTimestamp(builder, timestamp):
    FrameAddTimestamp(builder, timestamp)

def FrameAddCommand(builder, command):
    builder.PrependInt8Slot(1, command, 0)

def AddCommand(builder, command):
    FrameAddCommand(builder, command)

def FrameAddSender(builder, sender):
    builder.PrependInt8Slot(2, sender, 0)

def AddSender(builder, sender):
    FrameAddSender(builder, sender)

def FrameAddDataType(builder, dataType):
    builder.PrependUint8Slot(3, dataType, 0)

def AddDataType(builder, dataType):
    FrameAddDataType(builder, dataType)

def FrameAddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)

def AddData(builder, data):
    FrameAddData(builder, data)

def FrameEnd(builder):
    return builder.EndObject()

def End(builder):
    return FrameEnd(builder)
