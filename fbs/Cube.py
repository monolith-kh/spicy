# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cube(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cube()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCube(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Cube
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cube
    def Uid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Cube
    def PosCur(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from fbs.Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Cube
    def PosTarget(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from fbs.Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Cube
    def Speed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Cube
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def CubeStart(builder):
    builder.StartObject(5)

def Start(builder):
    CubeStart(builder)

def CubeAddUid(builder, uid):
    builder.PrependInt32Slot(0, uid, 0)

def AddUid(builder, uid):
    CubeAddUid(builder, uid)

def CubeAddPosCur(builder, posCur):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(posCur), 0)

def AddPosCur(builder, posCur):
    CubeAddPosCur(builder, posCur)

def CubeAddPosTarget(builder, posTarget):
    builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(posTarget), 0)

def AddPosTarget(builder, posTarget):
    CubeAddPosTarget(builder, posTarget)

def CubeAddSpeed(builder, speed):
    builder.PrependFloat32Slot(3, speed, 0.0)

def AddSpeed(builder, speed):
    CubeAddSpeed(builder, speed)

def CubeAddType(builder, type):
    builder.PrependInt8Slot(4, type, 0)

def AddType(builder, type):
    CubeAddType(builder, type)

def CubeEnd(builder):
    return builder.EndObject()

def End(builder):
    return CubeEnd(builder)
